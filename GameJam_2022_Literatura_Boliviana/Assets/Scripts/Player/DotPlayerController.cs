//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/Player/DotPlayerController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @DotPlayerController : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @DotPlayerController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""DotPlayerController"",
    ""maps"": [
        {
            ""name"": ""DotPlayer_1"",
            ""id"": ""3e28a261-77d9-41ba-9bf5-b62ca61e3fbd"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""37938455-2c77-46f9-8fa7-8e7bd4d89cac"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""5bcbac6a-f0d7-47df-ac5e-91e90c3f51b0"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""820d14b6-ad2e-4ed3-90c9-1c6167c6b811"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""ca5e6a62-c31f-4705-995a-11c4baa002ee"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""6409875b-843f-4da7-8969-f6067a12cc14"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""56daee72-f9ed-4456-b4f7-269ae753061e"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""DotPlayer_2"",
            ""id"": ""e6fdc84c-2e04-400b-b9b7-b769d21f09b5"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""572e3ed2-86bc-47a1-928f-b4c2b89f9fc4"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Arrows"",
                    ""id"": ""b54d6c82-f136-4d87-a656-a2cf5f56ba40"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""f0ffd7ef-7f83-4b0a-a6b6-3266d6e35a6c"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""884c9b91-8fe3-41d8-9244-db610cfdf438"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""b5c39714-4bd8-4930-b6df-24f9e3653e29"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""8ce0a59a-cbaa-48ea-af24-8f4a3f7e85d7"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // DotPlayer_1
        m_DotPlayer_1 = asset.FindActionMap("DotPlayer_1", throwIfNotFound: true);
        m_DotPlayer_1_Movement = m_DotPlayer_1.FindAction("Movement", throwIfNotFound: true);
        // DotPlayer_2
        m_DotPlayer_2 = asset.FindActionMap("DotPlayer_2", throwIfNotFound: true);
        m_DotPlayer_2_Movement = m_DotPlayer_2.FindAction("Movement", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // DotPlayer_1
    private readonly InputActionMap m_DotPlayer_1;
    private IDotPlayer_1Actions m_DotPlayer_1ActionsCallbackInterface;
    private readonly InputAction m_DotPlayer_1_Movement;
    public struct DotPlayer_1Actions
    {
        private @DotPlayerController m_Wrapper;
        public DotPlayer_1Actions(@DotPlayerController wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_DotPlayer_1_Movement;
        public InputActionMap Get() { return m_Wrapper.m_DotPlayer_1; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DotPlayer_1Actions set) { return set.Get(); }
        public void SetCallbacks(IDotPlayer_1Actions instance)
        {
            if (m_Wrapper.m_DotPlayer_1ActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_DotPlayer_1ActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_DotPlayer_1ActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_DotPlayer_1ActionsCallbackInterface.OnMovement;
            }
            m_Wrapper.m_DotPlayer_1ActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
            }
        }
    }
    public DotPlayer_1Actions @DotPlayer_1 => new DotPlayer_1Actions(this);

    // DotPlayer_2
    private readonly InputActionMap m_DotPlayer_2;
    private IDotPlayer_2Actions m_DotPlayer_2ActionsCallbackInterface;
    private readonly InputAction m_DotPlayer_2_Movement;
    public struct DotPlayer_2Actions
    {
        private @DotPlayerController m_Wrapper;
        public DotPlayer_2Actions(@DotPlayerController wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_DotPlayer_2_Movement;
        public InputActionMap Get() { return m_Wrapper.m_DotPlayer_2; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DotPlayer_2Actions set) { return set.Get(); }
        public void SetCallbacks(IDotPlayer_2Actions instance)
        {
            if (m_Wrapper.m_DotPlayer_2ActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_DotPlayer_2ActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_DotPlayer_2ActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_DotPlayer_2ActionsCallbackInterface.OnMovement;
            }
            m_Wrapper.m_DotPlayer_2ActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
            }
        }
    }
    public DotPlayer_2Actions @DotPlayer_2 => new DotPlayer_2Actions(this);
    public interface IDotPlayer_1Actions
    {
        void OnMovement(InputAction.CallbackContext context);
    }
    public interface IDotPlayer_2Actions
    {
        void OnMovement(InputAction.CallbackContext context);
    }
}
